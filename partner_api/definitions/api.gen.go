// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ProductItem defines model for ProductItem.
type ProductItem struct {
	Category    string `json:"category"`
	LeftInStock int    `json:"left_in_stock"`
	Name        string `json:"name"`
	Price       string `json:"price"`
}

// PostAddProductsInStockV1JSONBody defines parameters for PostAddProductsInStockV1.
type PostAddProductsInStockV1JSONBody struct {
	Products []struct {
		NumberToAdd int `json:"number_to_add"`
		ProductId   int `json:"product_id"`
	} `json:"products"`
}

// PostAddProductsInStockV1Params defines parameters for PostAddProductsInStockV1.
type PostAddProductsInStockV1Params struct {
	Authorization string `json:"Authorization"`
}

// PostRegisterNewProductV1Params defines parameters for PostRegisterNewProductV1.
type PostRegisterNewProductV1Params struct {
	Authorization string `json:"Authorization"`
}

// PostRegisterPartnerV1JSONBody defines parameters for PostRegisterPartnerV1.
type PostRegisterPartnerV1JSONBody struct {
	PartnerName string `json:"partner_name"`
}

// PostAddProductsInStockV1JSONRequestBody defines body for PostAddProductsInStockV1 for application/json ContentType.
type PostAddProductsInStockV1JSONRequestBody PostAddProductsInStockV1JSONBody

// PostRegisterNewProductV1JSONRequestBody defines body for PostRegisterNewProductV1 for application/json ContentType.
type PostRegisterNewProductV1JSONRequestBody = ProductItem

// PostRegisterPartnerV1JSONRequestBody defines body for PostRegisterPartnerV1 for application/json ContentType.
type PostRegisterPartnerV1JSONRequestBody PostRegisterPartnerV1JSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /add-products-in-stock/v1)
	PostAddProductsInStockV1(w http.ResponseWriter, r *http.Request, params PostAddProductsInStockV1Params)

	// (POST /register-new-product/v1)
	PostRegisterNewProductV1(w http.ResponseWriter, r *http.Request, params PostRegisterNewProductV1Params)

	// (POST /register-partner/v1)
	PostRegisterPartnerV1(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /add-products-in-stock/v1)
func (_ Unimplemented) PostAddProductsInStockV1(w http.ResponseWriter, r *http.Request, params PostAddProductsInStockV1Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register-new-product/v1)
func (_ Unimplemented) PostRegisterNewProductV1(w http.ResponseWriter, r *http.Request, params PostRegisterNewProductV1Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register-partner/v1)
func (_ Unimplemented) PostRegisterPartnerV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAddProductsInStockV1 operation middleware
func (siw *ServerInterfaceWrapper) PostAddProductsInStockV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAddProductsInStockV1Params

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAddProductsInStockV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegisterNewProductV1 operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterNewProductV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRegisterNewProductV1Params

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegisterNewProductV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegisterPartnerV1 operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterPartnerV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegisterPartnerV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/add-products-in-stock/v1", wrapper.PostAddProductsInStockV1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register-new-product/v1", wrapper.PostRegisterNewProductV1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register-partner/v1", wrapper.PostRegisterPartnerV1)
	})

	return r
}

type PostAddProductsInStockV1RequestObject struct {
	Params PostAddProductsInStockV1Params
	Body   *PostAddProductsInStockV1JSONRequestBody
}

type PostAddProductsInStockV1ResponseObject interface {
	VisitPostAddProductsInStockV1Response(w http.ResponseWriter) error
}

type PostAddProductsInStockV1200Response struct {
}

func (response PostAddProductsInStockV1200Response) VisitPostAddProductsInStockV1Response(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAddProductsInStockV1401JSONResponse ErrorResponse

func (response PostAddProductsInStockV1401JSONResponse) VisitPostAddProductsInStockV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAddProductsInStockV1404JSONResponse ErrorResponse

func (response PostAddProductsInStockV1404JSONResponse) VisitPostAddProductsInStockV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterNewProductV1RequestObject struct {
	Params PostRegisterNewProductV1Params
	Body   *PostRegisterNewProductV1JSONRequestBody
}

type PostRegisterNewProductV1ResponseObject interface {
	VisitPostRegisterNewProductV1Response(w http.ResponseWriter) error
}

type PostRegisterNewProductV1200JSONResponse struct {
	ProductId int `json:"product_id"`
}

func (response PostRegisterNewProductV1200JSONResponse) VisitPostRegisterNewProductV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterNewProductV1401JSONResponse ErrorResponse

func (response PostRegisterNewProductV1401JSONResponse) VisitPostRegisterNewProductV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterNewProductV1404JSONResponse ErrorResponse

func (response PostRegisterNewProductV1404JSONResponse) VisitPostRegisterNewProductV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterPartnerV1RequestObject struct {
	Body *PostRegisterPartnerV1JSONRequestBody
}

type PostRegisterPartnerV1ResponseObject interface {
	VisitPostRegisterPartnerV1Response(w http.ResponseWriter) error
}

type PostRegisterPartnerV1200JSONResponse struct {
	PermanentToken string `json:"permanent_token"`
}

func (response PostRegisterPartnerV1200JSONResponse) VisitPostRegisterPartnerV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterPartnerV1409JSONResponse ErrorResponse

func (response PostRegisterPartnerV1409JSONResponse) VisitPostRegisterPartnerV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /add-products-in-stock/v1)
	PostAddProductsInStockV1(ctx context.Context, request PostAddProductsInStockV1RequestObject) (PostAddProductsInStockV1ResponseObject, error)

	// (POST /register-new-product/v1)
	PostRegisterNewProductV1(ctx context.Context, request PostRegisterNewProductV1RequestObject) (PostRegisterNewProductV1ResponseObject, error)

	// (POST /register-partner/v1)
	PostRegisterPartnerV1(ctx context.Context, request PostRegisterPartnerV1RequestObject) (PostRegisterPartnerV1ResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAddProductsInStockV1 operation middleware
func (sh *strictHandler) PostAddProductsInStockV1(w http.ResponseWriter, r *http.Request, params PostAddProductsInStockV1Params) {
	var request PostAddProductsInStockV1RequestObject

	request.Params = params

	var body PostAddProductsInStockV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddProductsInStockV1(ctx, request.(PostAddProductsInStockV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddProductsInStockV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAddProductsInStockV1ResponseObject); ok {
		if err := validResponse.VisitPostAddProductsInStockV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegisterNewProductV1 operation middleware
func (sh *strictHandler) PostRegisterNewProductV1(w http.ResponseWriter, r *http.Request, params PostRegisterNewProductV1Params) {
	var request PostRegisterNewProductV1RequestObject

	request.Params = params

	var body PostRegisterNewProductV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegisterNewProductV1(ctx, request.(PostRegisterNewProductV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegisterNewProductV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterNewProductV1ResponseObject); ok {
		if err := validResponse.VisitPostRegisterNewProductV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegisterPartnerV1 operation middleware
func (sh *strictHandler) PostRegisterPartnerV1(w http.ResponseWriter, r *http.Request) {
	var request PostRegisterPartnerV1RequestObject

	var body PostRegisterPartnerV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegisterPartnerV1(ctx, request.(PostRegisterPartnerV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegisterPartnerV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterPartnerV1ResponseObject); ok {
		if err := validResponse.VisitPostRegisterPartnerV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
