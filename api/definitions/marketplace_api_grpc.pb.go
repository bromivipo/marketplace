// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: definitions/marketplace_api.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketplaceInternal_AddProductsInStock_FullMethodName = "/internalgrpc.MarketplaceInternal/AddProductsInStock"
	MarketplaceInternal_RegisterNewProduct_FullMethodName = "/internalgrpc.MarketplaceInternal/RegisterNewProduct"
)

// MarketplaceInternalClient is the client API for MarketplaceInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceInternalClient interface {
	AddProductsInStock(ctx context.Context, in *AddProductsRequest, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewProduct(ctx context.Context, in *ProductToRegister, opts ...grpc.CallOption) (*ProductId, error)
}

type marketplaceInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceInternalClient(cc grpc.ClientConnInterface) MarketplaceInternalClient {
	return &marketplaceInternalClient{cc}
}

func (c *marketplaceInternalClient) AddProductsInStock(ctx context.Context, in *AddProductsRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MarketplaceInternal_AddProductsInStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceInternalClient) RegisterNewProduct(ctx context.Context, in *ProductToRegister, opts ...grpc.CallOption) (*ProductId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductId)
	err := c.cc.Invoke(ctx, MarketplaceInternal_RegisterNewProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceInternalServer is the server API for MarketplaceInternal service.
// All implementations must embed UnimplementedMarketplaceInternalServer
// for forward compatibility.
type MarketplaceInternalServer interface {
	AddProductsInStock(context.Context, *AddProductsRequest) (*Empty, error)
	RegisterNewProduct(context.Context, *ProductToRegister) (*ProductId, error)
	mustEmbedUnimplementedMarketplaceInternalServer()
}

// UnimplementedMarketplaceInternalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketplaceInternalServer struct{}

func (UnimplementedMarketplaceInternalServer) AddProductsInStock(context.Context, *AddProductsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductsInStock not implemented")
}
func (UnimplementedMarketplaceInternalServer) RegisterNewProduct(context.Context, *ProductToRegister) (*ProductId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewProduct not implemented")
}
func (UnimplementedMarketplaceInternalServer) mustEmbedUnimplementedMarketplaceInternalServer() {}
func (UnimplementedMarketplaceInternalServer) testEmbeddedByValue()                             {}

// UnsafeMarketplaceInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceInternalServer will
// result in compilation errors.
type UnsafeMarketplaceInternalServer interface {
	mustEmbedUnimplementedMarketplaceInternalServer()
}

func RegisterMarketplaceInternalServer(s grpc.ServiceRegistrar, srv MarketplaceInternalServer) {
	// If the following call pancis, it indicates UnimplementedMarketplaceInternalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketplaceInternal_ServiceDesc, srv)
}

func _MarketplaceInternal_AddProductsInStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceInternalServer).AddProductsInStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceInternal_AddProductsInStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceInternalServer).AddProductsInStock(ctx, req.(*AddProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceInternal_RegisterNewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductToRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceInternalServer).RegisterNewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceInternal_RegisterNewProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceInternalServer).RegisterNewProduct(ctx, req.(*ProductToRegister))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketplaceInternal_ServiceDesc is the grpc.ServiceDesc for MarketplaceInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalgrpc.MarketplaceInternal",
	HandlerType: (*MarketplaceInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductsInStock",
			Handler:    _MarketplaceInternal_AddProductsInStock_Handler,
		},
		{
			MethodName: "RegisterNewProduct",
			Handler:    _MarketplaceInternal_RegisterNewProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "definitions/marketplace_api.proto",
}
