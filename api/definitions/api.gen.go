// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ProductItem defines model for ProductItem.
type ProductItem struct {
	Category    string  `json:"category"`
	Id          int     `json:"id"`
	LeftInStock int     `json:"left_in_stock"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	ProviderId  int     `json:"provider_id"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMakeOrderV1JSONBody defines parameters for PostMakeOrderV1.
type PostMakeOrderV1JSONBody struct {
	ProductIds []int `json:"product_ids"`
}

// PostMakeOrderV1Params defines parameters for PostMakeOrderV1.
type PostMakeOrderV1Params struct {
	Authorization string `json:"Authorization"`
}

// GetProductByIdV1Params defines parameters for GetProductByIdV1.
type GetProductByIdV1Params struct {
	Id int `form:"id" json:"id"`
}

// PostLoginV1JSONRequestBody defines body for PostLoginV1 for application/json ContentType.
type PostLoginV1JSONRequestBody = UserInfo

// PostMakeOrderV1JSONRequestBody defines body for PostMakeOrderV1 for application/json ContentType.
type PostMakeOrderV1JSONRequestBody PostMakeOrderV1JSONBody

// PostRegisterV1JSONRequestBody defines body for PostRegisterV1 for application/json ContentType.
type PostRegisterV1JSONRequestBody = UserInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login/v1)
	PostLoginV1(w http.ResponseWriter, r *http.Request)

	// (POST /make-order/v1)
	PostMakeOrderV1(w http.ResponseWriter, r *http.Request, params PostMakeOrderV1Params)

	// (GET /product-by-id/v1)
	GetProductByIdV1(w http.ResponseWriter, r *http.Request, params GetProductByIdV1Params)

	// (GET /products/v1)
	GetProductsV1(w http.ResponseWriter, r *http.Request)

	// (POST /register/v1)
	PostRegisterV1(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /login/v1)
func (_ Unimplemented) PostLoginV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /make-order/v1)
func (_ Unimplemented) PostMakeOrderV1(w http.ResponseWriter, r *http.Request, params PostMakeOrderV1Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /product-by-id/v1)
func (_ Unimplemented) GetProductByIdV1(w http.ResponseWriter, r *http.Request, params GetProductByIdV1Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /products/v1)
func (_ Unimplemented) GetProductsV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register/v1)
func (_ Unimplemented) PostRegisterV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostLoginV1 operation middleware
func (siw *ServerInterfaceWrapper) PostLoginV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLoginV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostMakeOrderV1 operation middleware
func (siw *ServerInterfaceWrapper) PostMakeOrderV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostMakeOrderV1Params

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMakeOrderV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProductByIdV1 operation middleware
func (siw *ServerInterfaceWrapper) GetProductByIdV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIdV1Params

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProductByIdV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProductsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetProductsV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProductsV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegisterV1 operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterV1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegisterV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login/v1", wrapper.PostLoginV1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/make-order/v1", wrapper.PostMakeOrderV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/product-by-id/v1", wrapper.GetProductByIdV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products/v1", wrapper.GetProductsV1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register/v1", wrapper.PostRegisterV1)
	})

	return r
}

type PostLoginV1RequestObject struct {
	Body *PostLoginV1JSONRequestBody
}

type PostLoginV1ResponseObject interface {
	VisitPostLoginV1Response(w http.ResponseWriter) error
}

type PostLoginV1200JSONResponse struct {
	// Token jwt token for further auth
	Token string `json:"token"`
}

func (response PostLoginV1200JSONResponse) VisitPostLoginV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginV1401JSONResponse ErrorResponse

func (response PostLoginV1401JSONResponse) VisitPostLoginV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginV1404JSONResponse ErrorResponse

func (response PostLoginV1404JSONResponse) VisitPostLoginV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostMakeOrderV1RequestObject struct {
	Params PostMakeOrderV1Params
	Body   *PostMakeOrderV1JSONRequestBody
}

type PostMakeOrderV1ResponseObject interface {
	VisitPostMakeOrderV1Response(w http.ResponseWriter) error
}

type PostMakeOrderV1200Response struct {
}

func (response PostMakeOrderV1200Response) VisitPostMakeOrderV1Response(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostMakeOrderV1404JSONResponse ErrorResponse

func (response PostMakeOrderV1404JSONResponse) VisitPostMakeOrderV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostMakeOrderV1409JSONResponse ErrorResponse

func (response PostMakeOrderV1409JSONResponse) VisitPostMakeOrderV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIdV1RequestObject struct {
	Params GetProductByIdV1Params
}

type GetProductByIdV1ResponseObject interface {
	VisitGetProductByIdV1Response(w http.ResponseWriter) error
}

type GetProductByIdV1200JSONResponse struct {
	Product ProductItem `json:"product"`
}

func (response GetProductByIdV1200JSONResponse) VisitGetProductByIdV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIdV1400JSONResponse ErrorResponse

func (response GetProductByIdV1400JSONResponse) VisitGetProductByIdV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIdV1404JSONResponse ErrorResponse

func (response GetProductByIdV1404JSONResponse) VisitGetProductByIdV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProductsV1RequestObject struct {
}

type GetProductsV1ResponseObject interface {
	VisitGetProductsV1Response(w http.ResponseWriter) error
}

type GetProductsV1200JSONResponse struct {
	Products []ProductItem `json:"products"`
}

func (response GetProductsV1200JSONResponse) VisitGetProductsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterV1RequestObject struct {
	Body *PostRegisterV1JSONRequestBody
}

type PostRegisterV1ResponseObject interface {
	VisitPostRegisterV1Response(w http.ResponseWriter) error
}

type PostRegisterV1200Response struct {
}

func (response PostRegisterV1200Response) VisitPostRegisterV1Response(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRegisterV1409JSONResponse ErrorResponse

func (response PostRegisterV1409JSONResponse) VisitPostRegisterV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /login/v1)
	PostLoginV1(ctx context.Context, request PostLoginV1RequestObject) (PostLoginV1ResponseObject, error)

	// (POST /make-order/v1)
	PostMakeOrderV1(ctx context.Context, request PostMakeOrderV1RequestObject) (PostMakeOrderV1ResponseObject, error)

	// (GET /product-by-id/v1)
	GetProductByIdV1(ctx context.Context, request GetProductByIdV1RequestObject) (GetProductByIdV1ResponseObject, error)

	// (GET /products/v1)
	GetProductsV1(ctx context.Context, request GetProductsV1RequestObject) (GetProductsV1ResponseObject, error)

	// (POST /register/v1)
	PostRegisterV1(ctx context.Context, request PostRegisterV1RequestObject) (PostRegisterV1ResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostLoginV1 operation middleware
func (sh *strictHandler) PostLoginV1(w http.ResponseWriter, r *http.Request) {
	var request PostLoginV1RequestObject

	var body PostLoginV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLoginV1(ctx, request.(PostLoginV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLoginV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginV1ResponseObject); ok {
		if err := validResponse.VisitPostLoginV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMakeOrderV1 operation middleware
func (sh *strictHandler) PostMakeOrderV1(w http.ResponseWriter, r *http.Request, params PostMakeOrderV1Params) {
	var request PostMakeOrderV1RequestObject

	request.Params = params

	var body PostMakeOrderV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostMakeOrderV1(ctx, request.(PostMakeOrderV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMakeOrderV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostMakeOrderV1ResponseObject); ok {
		if err := validResponse.VisitPostMakeOrderV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductByIdV1 operation middleware
func (sh *strictHandler) GetProductByIdV1(w http.ResponseWriter, r *http.Request, params GetProductByIdV1Params) {
	var request GetProductByIdV1RequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductByIdV1(ctx, request.(GetProductByIdV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductByIdV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProductByIdV1ResponseObject); ok {
		if err := validResponse.VisitGetProductByIdV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductsV1 operation middleware
func (sh *strictHandler) GetProductsV1(w http.ResponseWriter, r *http.Request) {
	var request GetProductsV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductsV1(ctx, request.(GetProductsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProductsV1ResponseObject); ok {
		if err := validResponse.VisitGetProductsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegisterV1 operation middleware
func (sh *strictHandler) PostRegisterV1(w http.ResponseWriter, r *http.Request) {
	var request PostRegisterV1RequestObject

	var body PostRegisterV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegisterV1(ctx, request.(PostRegisterV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegisterV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterV1ResponseObject); ok {
		if err := validResponse.VisitPostRegisterV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
